#pragma once

#include <stdbool.h>
#include <stdint.h>
#include <string.h>

#include <csqc/scanner.h>

/* The object type enum. */
typedef enum
{
	/*
	 *	The prefix types, they express the different vague types of objects we
	 *	can have.
	 */
	OBJECT_TYPE_PREFIX_DECLARATION = 0x3,
	OBJECT_TYPE_PREFIX_EXPRESSION = 0x2,
	OBJECT_TYPE_PREFIX_LITERAL = 0x1,
	OBJECT_TYPE_PREFIX_UNKNOWN = 0x0,
	OBJECT_TYPE_PREFIX_SYMBOL = 0x4,
	OBJECT_TYPE_PREFIX_KEYWORD = 0x5,
	OBJECT_TYPE_PREFIX_RULE = 0x6,

	/* The unknown suffix type. */
	OBJECT_TYPE_SUFFIX_UNKNOWN = 0x00,

	/*
	 *	The suffix type(s) for expressions.
	 *	The `object_type_t` type has now become a 12-bit type due to the need
	 *	of more number combinations for expressions.
	 */
	OBJECT_TYPE_SUFFIX_MULTIPLICATIVE_EXPRESSION = 0x08,
	OBJECT_TYPE_SUFFIX_EXCLUSIVE_OR_EXPRESSION = 0x0E,
	OBJECT_TYPE_SUFFIX_INCLUSIVE_OR_EXPRESSION = 0x0F,
	OBJECT_TYPE_SUFFIX_CONDITIONAL_EXPRESSION = 0x03,
	OBJECT_TYPE_SUFFIX_LOGICAL_AND_EXPRESSION = 0x10,
	OBJECT_TYPE_SUFFIX_LOGICAL_OR_EXPRESSION = 0x11,
	OBJECT_TYPE_SUFFIX_ASSIGNMENT_EXPRESSION = 0x02,
	OBJECT_TYPE_SUFFIX_RELATIONAL_EXPRESSION = 0x0B,
	OBJECT_TYPE_SUFFIX_CONSTANT_EXPRESSION = 0x12,
	OBJECT_TYPE_SUFFIX_EQUALITY_EXPRESSION = 0x0C,
	OBJECT_TYPE_SUFFIX_ADDITIVE_EXPRESSION = 0x09,
	OBJECT_TYPE_SUFFIX_PRIMARY_EXPRESSION = 0x07,
	OBJECT_TYPE_SUFFIX_POSTFIX_EXPRESSION = 0x05,
	OBJECT_TYPE_SUFFIX_SHIFT_EXPRESSION = 0x0A,
	OBJECT_TYPE_SUFFIX_UNARY_EXPRESSION = 0x04,
	OBJECT_TYPE_SUFFIX_CAST_EXPRESSION = 0x06,
	OBJECT_TYPE_SUFFIX_AND_EXPRESSION = 0x0D,
	OBJECT_TYPE_SUFFIX_EXPRESSION = 0x01,

	/* The sufffix type(s) for declarations. */
	OBJECT_TYPE_SUFFIX_EXTERNAL_DECLARATION = 0x01,
	OBJECT_TYPE_SUFFIX_STRUCT_DECLARATION = 0x02,
	OBJECT_TYPE_SUFFIX_PARAMETER_DECLARATION = 0x03,
	OBJECT_TYPE_SUFFIX_DECLARATION = 0x04,

	/* The suffix type(s) for symbols. */
	OBJECT_TYPE_SUFFIX_ELLIPSIS_SYMBOL = 0x01,
	OBJECT_TYPE_SUFFIX_EQUAL_TO_SYMBOL = 0x02,
	OBJECT_TYPE_SUFFIX_NOT_EQUAL_TO_SYMBOL = 0x03,
	OBJECT_TYPE_SUFFIX_LESS_THAN_OR_EQUAL_TO_SYMBOL = 0x04,
	OBJECT_TYPE_SUFFIX_GREATER_THAN_OR_EQUAL_TO_SYMBOL = 0x05,
	OBJECT_TYPE_SUFFIX_LOGICAL_AND_SYMBOL = 0x06,
	OBJECT_TYPE_SUFFIX_LOGICAL_OR_SYMBOL = 0x07,
	OBJECT_TYPE_SUFFIX_LEFT_SHIFT_SYMBOL = 0x08,
	OBJECT_TYPE_SUFFIX_RIGHT_SHIFT_SYMBOL = 0x09,
	OBJECT_TYPE_SUFFIX_ADD_SYMBOL = 0x0A,
	OBJECT_TYPE_SUFFIX_SUBTRACT_SYMBOL = 0x0B,
	OBJECT_TYPE_SUFFIX_DIVIDE_SYMBOL = 0x0C,
	OBJECT_TYPE_SUFFIX_MULTIPLY_SYMBOL = 0x0D,
	OBJECT_TYPE_SUFFIX_ASSIGN_SYMBOL = 0x0E,
	OBJECT_TYPE_SUFFIX_MULTIPLY_ASSIGN_SYMBOL = 0x0F,
	OBJECT_TYPE_SUFFIX_DIVIDE_ASSIGN_SYMBOL = 0x10,
	OBJECT_TYPE_SUFFIX_MODULO_ASSIGN_SYMBOL = 0x11,
	OBJECT_TYPE_SUFFIX_ADDITION_ASSIGN_SYMBOL = 0x12,
	OBJECT_TYPE_SUFFIX_SUBTRACTION_ASSIGN_SYMBOL = 0x13,
	OBJECT_TYPE_SUFFIX_LEFT_SHIFT_ASSIGN_SYMBOL = 0x14,
	OBJECT_TYPE_SUFFIX_RIGHT_SHIFT_ASSIGN_SYMBOL = 0x15,
	OBJECT_TYPE_SUFFIX_BITWISE_AND_ASSIGN_SYMBOL = 0x16,
	OBJECT_TYPE_SUFFIX_BITWISE_XOR_ASSIGN_SYMBOL = 0x17,
	OBJECT_TYPE_SUFFIX_BITWISE_OR_ASSIGN_SYMBOL = 0x18,
	OBJECT_TYPE_SUFFIX_LESS_THAN_SYMBOL = 0x19,
	OBJECT_TYPE_SUFFIX_GREATER_THAN_SYMBOL = 0x1A,
	OBJECT_TYPE_SUFFIX_LOGICAL_NOT_SYMBOL = 0x1B,
	OBJECT_TYPE_SUFFIX_BITWISE_AND_SYMBOL = 0x1C,
	OBJECT_TYPE_SUFFIX_BITWISE_OR_SYMBOL = 0x1D,
	OBJECT_TYPE_SUFFIX_BITWISE_XOR_SYMBOL = 0x1E,
	OBJECT_TYPE_SUFFIX_BITWISE_NOT_SYMBOL = 0x1F,
	OBJECT_TYPE_SUFFIX_LEFT_PARENTHESIS_SYMBOL = 0x20,
	OBJECT_TYPE_SUFFIX_RIGHT_PARENTHESIS_SYMBOL = 0x21,
	OBJECT_TYPE_SUFFIX_LEFT_BRACE_SYMBOL = 0x22,
	OBJECT_TYPE_SUFFIX_RIGHT_BRACE_SYMBOL = 0x23,
	OBJECT_TYPE_SUFFIX_LEFT_BRACKET_SYMBOL = 0x24,
	OBJECT_TYPE_SUFFIX_RIGHT_BRACKET_SYMBOL = 0x25,
	OBJECT_TYPE_SUFFIX_SEMICOLON_SYMBOL = 0x26,
	OBJECT_TYPE_SUFFIX_COMMA_SYMBOL = 0x27,
	OBJECT_TYPE_SUFFIX_PERIOD_SYMBOL = 0x28,
	OBJECT_TYPE_SUFFIX_MODULO_SYMBOL = 0x29,
	OBJECT_TYPE_SUFFIX_CONDITIONAL_SYMBOL = 0x2A,
	OBJECT_TYPE_SUFFIX_COLON_SYMBOL = 0x2B,
	OBJECT_TYPE_SUFFIX_INCREMENT_SYMBOL = 0x2C,
	OBJECT_TYPE_SUFFIX_DECREMENT_SYMBOL = 0x2D,
	OBJECT_TYPE_SUFFIX_ARROW_SYMBOL = 0x2E,

	/* The suffix type(s) for keywords. */
	OBJECT_TYPE_SUFFIX_AUTO_KEYWORD = 0x01,
	OBJECT_TYPE_SUFFIX_BREAK_KEYWORD = 0x02,
	OBJECT_TYPE_SUFFIX_CASE_KEYWORD = 0x03,
	OBJECT_TYPE_SUFFIX_BYTE_KEYWORD = 0x04,
	OBJECT_TYPE_SUFFIX_CONST_KEYWORD = 0x05,
	OBJECT_TYPE_SUFFIX_CONTINUE_KEYWORD = 0x06,
	OBJECT_TYPE_SUFFIX_DEFAULT_KEYWORD = 0x07,
	OBJECT_TYPE_SUFFIX_DO_KEYWORD = 0x08,
	OBJECT_TYPE_SUFFIX_ELSE_KEYWORD = 0x09,
	OBJECT_TYPE_SUFFIX_ENUM_KEYWORD = 0x0A,
	OBJECT_TYPE_SUFFIX_EXTERN_KEYWORD = 0x0B,
	OBJECT_TYPE_SUFFIX_FOR_KEYWORD = 0x0C,
	OBJECT_TYPE_SUFFIX_GOTO_KEYWORD = 0x0D,
	OBJECT_TYPE_SUFFIX_IF_KEYWORD = 0x0E,
	OBJECT_TYPE_SUFFIX_REGISTER_KEYWORD = 0x0F,
	OBJECT_TYPE_SUFFIX_RETURN_KEYWORD = 0x10,
	OBJECT_TYPE_SUFFIX_SIGNED_KEYWORD = 0x11,
	OBJECT_TYPE_SUFFIX_SIZEOF_KEYWORD = 0x12,
	OBJECT_TYPE_SUFFIX_STATIC_KEYWORD = 0x13,
	OBJECT_TYPE_SUFFIX_STRUCT_KEYWORD = 0x14,
	OBJECT_TYPE_SUFFIX_SWITCH_KEYWORD = 0x15,
	OBJECT_TYPE_SUFFIX_TYPEDEF_KEYWORD = 0x16,
	OBJECT_TYPE_SUFFIX_UNION_KEYWORD = 0x17,
	OBJECT_TYPE_SUFFIX_UNSIGNED_KEYWORD = 0x18,
	OBJECT_TYPE_SUFFIX_VOID_KEYWORD = 0x19,
	OBJECT_TYPE_SUFFIX_VOLATILE_KEYWORD = 0x1A,
	OBJECT_TYPE_SUFFIX_WHILE_KEYWORD = 0x1B,

	/* The suffix type(s) for literals. */
	OBJECT_TYPE_SUFFIX_FLOAT_LITERAL = 0x01,
	OBJECT_TYPE_SUFFIX_INTEGER_LITERAL = 0x02,
	OBJECT_TYPE_SUFFIX_CHARACTER_LITERAL = 0x03,
	OBJECT_TYPE_SUFFIX_STRING_LITERAL = 0x04,

	/* The suffix type(s) for rules. */
	OBJECT_TYPE_SUFFIX_RULE = 0x01,
	OBJECT_TYPE_SUFFIX_RULE_TRANSLATION_UNIT = 0x02,
	OBJECT_TYPE_SUFFIX_RULE_EXTERNAL_DECLARATION = 0x03,
	OBJECT_TYPE_SUFFIX_RULE_FUNCTION_DEFINITION = 0x04,
	OBJECT_TYPE_SUFFIX_RULE_DECLARATION_SPECIFIER = 0x05,
	OBJECT_TYPE_SUFFIX_RULE_STORAGE_CLASS_SPECIFIER = 0x06,
	OBJECT_TYPE_SUFFIX_RULE_TYPE_SPECIFIER = 0x07,
	OBJECT_TYPE_SUFFIX_RULE_STRUCT_OR_UNION_SPECIFIER = 0x08,
	OBJECT_TYPE_SUFFIX_RULE_STRUCT_OR_UNION = 0x09,
	OBJECT_TYPE_SUFFIX_RULE_STRUCT_DECLARATION = 0x0A,
	OBJECT_TYPE_SUFFIX_RULE_SPECIFIER_QUALIFIER = 0x0B,
	OBJECT_TYPE_SUFFIX_RULE_STRUCT_DECLARATOR_LIST = 0x0C,
	OBJECT_TYPE_SUFFIX_RULE_STRUCT_DECLARATOR = 0x0D,
	OBJECT_TYPE_SUFFIX_RULE_DECLARATOR = 0x0E,
	OBJECT_TYPE_SUFFIX_RULE_POINTER = 0x0F,
	OBJECT_TYPE_SUFFIX_RULE_TYPE_QUALIFIER = 0x10,
	OBJECT_TYPE_SUFFIX_RULE_DIRECT_DECLARATOR = 0x11,
	OBJECT_TYPE_SUFFIX_RULE_DIRECT_DECLARATOR_TAIL = 0x12,
	OBJECT_TYPE_SUFFIX_RULE_CONSTANT_EXPRESSION = 0x13,
	OBJECT_TYPE_SUFFIX_RULE_CONDITIONAL_EXPRESSION = 0x14,
	OBJECT_TYPE_SUFFIX_RULE_LOGICAL_OR_EXPRESSION = 0x15,
	OBJECT_TYPE_SUFFIX_RULE_LOGICAL_AND_EXPRESSION = 0x16,
	OBJECT_TYPE_SUFFIX_RULE_INCLUSIVE_OR_EXPRESSION = 0x17,
	OBJECT_TYPE_SUFFIX_RULE_EXCLUSIVE_OR_EXPRESSION = 0x18,
	OBJECT_TYPE_SUFFIX_RULE_AND_EXPRESSION = 0x19,
	OBJECT_TYPE_SUFFIX_RULE_EQUALITY_EXPRESSION = 0x1A,
	OBJECT_TYPE_SUFFIX_RULE_RELATIONAL_EXPRESSION = 0x1B,
	OBJECT_TYPE_SUFFIX_RULE_SHIFT_EXPRESSION = 0x1C,
	OBJECT_TYPE_SUFFIX_RULE_ADDITIVE_EXPRESSION = 0x1D,
	OBJECT_TYPE_SUFFIX_RULE_MULTIPLICATIVE_EXPRESSION = 0x1E,
	OBJECT_TYPE_SUFFIX_RULE_CAST_EXPRESSION = 0x1F,
	OBJECT_TYPE_SUFFIX_RULE_UNARY_EXPRESSION = 0x20,
	OBJECT_TYPE_SUFFIX_RULE_POSTFIX_EXPRESSION = 0x21,
	OBJECT_TYPE_SUFFIX_RULE_PRIMARY_EXPRESSION = 0x22,
	OBJECT_TYPE_SUFFIX_RULE_CONSTANT = 0x23,
	OBJECT_TYPE_SUFFIX_RULE_EXPRESSION = 0x24,
	OBJECT_TYPE_SUFFIX_RULE_ASSIGNMENT_EXPRESSION = 0x25,
	OBJECT_TYPE_SUFFIX_RULE_ASSIGNMENT_OPERATOR = 0x26,
	OBJECT_TYPE_SUFFIX_RULE_UNARY_OPERATOR = 0x27,
	OBJECT_TYPE_SUFFIX_RULE_TYPE_NAME = 0x28,
	OBJECT_TYPE_SUFFIX_RULE_PARAMETER_TYPE_LIST = 0x29,
	OBJECT_TYPE_SUFFIX_RULE_PARAMETER_LIST = 0x2A,
	OBJECT_TYPE_SUFFIX_RULE_PARAMETER_DECLARATION = 0x2B,
	OBJECT_TYPE_SUFFIX_RULE_ABSTRACT_DECLARATOR = 0x2C,
	OBJECT_TYPE_SUFFIX_RULE_DIRECT_ABSTRACT_DECLARATOR = 0x2D,
	OBJECT_TYPE_SUFFIX_RULE_DIRECT_ABSTRACT_DECLARATOR_TAIL = 0x2E,
	OBJECT_TYPE_SUFFIX_RULE_ENUM_SPECIFIER = 0x2F,
	OBJECT_TYPE_SUFFIX_RULE_ENUMERATOR_LIST = 0x30,
	OBJECT_TYPE_SUFFIX_RULE_ENUMERATOR = 0x31,
	OBJECT_TYPE_SUFFIX_RULE_TYPEDEF_NAME = 0x32,
	OBJECT_TYPE_SUFFIX_RULE_DECLARATION = 0x33,
	OBJECT_TYPE_SUFFIX_RULE_INIT_DECLARATOR = 0x34,
	OBJECT_TYPE_SUFFIX_RULE_INITIALIZER = 0x35,
	OBJECT_TYPE_SUFFIX_RULE_INITIALIZER_LIST = 0x36,
	OBJECT_TYPE_SUFFIX_RULE_COMPOUND_STATEMENT = 0x37,
	OBJECT_TYPE_SUFFIX_RULE_STATEMENT = 0x38,
	OBJECT_TYPE_SUFFIX_RULE_LABELED_STATEMENT = 0x39,
	OBJECT_TYPE_SUFFIX_RULE_EXPRESSION_STATEMENT = 0x3A,
	OBJECT_TYPE_SUFFIX_RULE_SELECTION_STATEMENT = 0x3B,
	OBJECT_TYPE_SUFFIX_RULE_ITERATION_STATEMENT = 0x3C,
	OBJECT_TYPE_SUFFIX_RULE_JUMP_STATEMENT = 0x3D,

	/* The suffix type for identifier(s). */
	OBJECT_TYPE_SUFFIX_IDENTIFIER = 0x01,

	/* The different symbol type(s). */
	OBJECT_TYPE_SYMBOL = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_UNKNOWN,
	OBJECT_TYPE_SYMBOL_ELLIPSIS = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_ELLIPSIS_SYMBOL,
	OBJECT_TYPE_SYMBOL_EQUAL_TO = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_EQUAL_TO_SYMBOL,
	OBJECT_TYPE_SYMBOL_NOT_EQUAL_TO = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_NOT_EQUAL_TO_SYMBOL,
	OBJECT_TYPE_SYMBOL_LESS_THAN_OR_EQUAL_TO = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_LESS_THAN_OR_EQUAL_TO_SYMBOL,
	OBJECT_TYPE_SYMBOL_GREATER_THAN_OR_EQUAL_TO = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_GREATER_THAN_OR_EQUAL_TO_SYMBOL,
	OBJECT_TYPE_SYMBOL_LOGICAL_AND = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_LOGICAL_AND_SYMBOL,
	OBJECT_TYPE_SYMBOL_LOGICAL_OR = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_LOGICAL_OR_SYMBOL,
	OBJECT_TYPE_SYMBOL_LEFT_SHIFT = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_LEFT_SHIFT_SYMBOL,
	OBJECT_TYPE_SYMBOL_RIGHT_SHIFT = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_RIGHT_SHIFT_SYMBOL,
	OBJECT_TYPE_SYMBOL_ADD = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_ADD_SYMBOL,
	OBJECT_TYPE_SYMBOL_SUBTRACT = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_SUBTRACT_SYMBOL,
	OBJECT_TYPE_SYMBOL_DIVIDE = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_DIVIDE_SYMBOL,
	OBJECT_TYPE_SYMBOL_MULTIPLY = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_MULTIPLY_SYMBOL,
	OBJECT_TYPE_SYMBOL_ASSIGN = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_ASSIGN_SYMBOL,
	OBJECT_TYPE_SYMBOL_MULTIPLY_ASSIGN = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_MULTIPLY_ASSIGN_SYMBOL,
	OBJECT_TYPE_SYMBOL_DIVIDE_ASSIGN = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_DIVIDE_ASSIGN_SYMBOL,
	OBJECT_TYPE_SYMBOL_MODULO_ASSIGN = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_MODULO_ASSIGN_SYMBOL,
	OBJECT_TYPE_SYMBOL_ADDITION_ASSIGN = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_ADDITION_ASSIGN_SYMBOL,
	OBJECT_TYPE_SYMBOL_SUBTRACTION_ASSIGN = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_SUBTRACTION_ASSIGN_SYMBOL,
	OBJECT_TYPE_SYMBOL_LEFT_SHIFT_ASSIGN = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_LEFT_SHIFT_ASSIGN_SYMBOL,
	OBJECT_TYPE_SYMBOL_RIGHT_SHIFT_ASSIGN = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_RIGHT_SHIFT_ASSIGN_SYMBOL,
	OBJECT_TYPE_SYMBOL_BITWISE_AND_ASSIGN = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_BITWISE_AND_ASSIGN_SYMBOL,
	OBJECT_TYPE_SYMBOL_BITWISE_XOR_ASSIGN = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_BITWISE_XOR_ASSIGN_SYMBOL,
	OBJECT_TYPE_SYMBOL_BITWISE_OR_ASSIGN = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_BITWISE_OR_ASSIGN_SYMBOL,
	OBJECT_TYPE_SYMBOL_LESS_THAN = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_LESS_THAN_SYMBOL,
	OBJECT_TYPE_SYMBOL_GREATER_THAN = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_GREATER_THAN_SYMBOL,
	OBJECT_TYPE_SYMBOL_LOGICAL_NOT = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_LOGICAL_NOT_SYMBOL,
	OBJECT_TYPE_SYMBOL_BITWISE_AND = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_BITWISE_AND_SYMBOL,
	OBJECT_TYPE_SYMBOL_BITWISE_OR = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_BITWISE_OR_SYMBOL,
	OBJECT_TYPE_SYMBOL_BITWISE_XOR = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_BITWISE_XOR_SYMBOL,
	OBJECT_TYPE_SYMBOL_BITWISE_NOT = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_BITWISE_NOT_SYMBOL,
	OBJECT_TYPE_SYMBOL_LEFT_PARENTHESIS = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_LEFT_PARENTHESIS_SYMBOL,
	OBJECT_TYPE_SYMBOL_RIGHT_PARENTHESIS = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_RIGHT_PARENTHESIS_SYMBOL,
	OBJECT_TYPE_SYMBOL_LEFT_BRACE = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_LEFT_BRACE_SYMBOL,
	OBJECT_TYPE_SYMBOL_RIGHT_BRACE = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_RIGHT_BRACE_SYMBOL,
	OBJECT_TYPE_SYMBOL_LEFT_BRACKET = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_LEFT_BRACKET_SYMBOL,
	OBJECT_TYPE_SYMBOL_RIGHT_BRACKET = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_RIGHT_BRACKET_SYMBOL,
	OBJECT_TYPE_SYMBOL_COMMA = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_COMMA_SYMBOL,
	OBJECT_TYPE_SYMBOL_PERIOD = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_PERIOD_SYMBOL,
	OBJECT_TYPE_SYMBOL_MODULO = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_MODULO_SYMBOL,
	OBJECT_TYPE_SYMBOL_SEMICOLON = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_SEMICOLON_SYMBOL,
	OBJECT_TYPE_SYMBOL_COLON = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_COLON_SYMBOL,
	OBJECT_TYPE_SYMBOL_INCREMENT = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_INCREMENT_SYMBOL,
	OBJECT_TYPE_SYMBOL_DECREMENT = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_DECREMENT_SYMBOL,
	OBJECT_TYPE_SYMBOL_ARROW = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_ARROW_SYMBOL,
	OBJECT_TYPE_SYMBOL_CONDITIONAL = (OBJECT_TYPE_PREFIX_SYMBOL << 8) | OBJECT_TYPE_SUFFIX_CONDITIONAL_SYMBOL,

	/* The different keyword type(s). */
	OBJECT_TYPE_KEYWORD = (OBJECT_TYPE_PREFIX_KEYWORD << 8) | OBJECT_TYPE_SUFFIX_UNKNOWN,
	OBJECT_TYPE_KEYWORD_AUTO = (OBJECT_TYPE_PREFIX_KEYWORD << 8) | OBJECT_TYPE_SUFFIX_AUTO_KEYWORD,
	OBJECT_TYPE_KEYWORD_BREAK = (OBJECT_TYPE_PREFIX_KEYWORD << 8) | OBJECT_TYPE_SUFFIX_BREAK_KEYWORD,
	OBJECT_TYPE_KEYWORD_CASE = (OBJECT_TYPE_PREFIX_KEYWORD << 8) | OBJECT_TYPE_SUFFIX_CASE_KEYWORD,
	OBJECT_TYPE_KEYWORD_BYTE = (OBJECT_TYPE_PREFIX_KEYWORD << 8) | OBJECT_TYPE_SUFFIX_BYTE_KEYWORD,
	OBJECT_TYPE_KEYWORD_CONST = (OBJECT_TYPE_PREFIX_KEYWORD << 8) | OBJECT_TYPE_SUFFIX_CONST_KEYWORD,
	OBJECT_TYPE_KEYWORD_CONTINUE = (OBJECT_TYPE_PREFIX_KEYWORD << 8) | OBJECT_TYPE_SUFFIX_CONTINUE_KEYWORD,
	OBJECT_TYPE_KEYWORD_DEFAULT = (OBJECT_TYPE_PREFIX_KEYWORD << 8) | OBJECT_TYPE_SUFFIX_DEFAULT_KEYWORD,
	OBJECT_TYPE_KEYWORD_DO = (OBJECT_TYPE_PREFIX_KEYWORD << 8) | OBJECT_TYPE_SUFFIX_DO_KEYWORD,
	OBJECT_TYPE_KEYWORD_ELSE = (OBJECT_TYPE_PREFIX_KEYWORD << 8) | OBJECT_TYPE_SUFFIX_ELSE_KEYWORD,
	OBJECT_TYPE_KEYWORD_ENUM = (OBJECT_TYPE_PREFIX_KEYWORD << 8) | OBJECT_TYPE_SUFFIX_ENUM_KEYWORD,
	OBJECT_TYPE_KEYWORD_EXTERN = (OBJECT_TYPE_PREFIX_KEYWORD << 8) | OBJECT_TYPE_SUFFIX_EXTERN_KEYWORD,
	OBJECT_TYPE_KEYWORD_FOR = (OBJECT_TYPE_PREFIX_KEYWORD << 8) | OBJECT_TYPE_SUFFIX_FOR_KEYWORD,
	OBJECT_TYPE_KEYWORD_GOTO = (OBJECT_TYPE_PREFIX_KEYWORD << 8) | OBJECT_TYPE_SUFFIX_GOTO_KEYWORD,
	OBJECT_TYPE_KEYWORD_IF = (OBJECT_TYPE_PREFIX_KEYWORD << 8) | OBJECT_TYPE_SUFFIX_IF_KEYWORD,
	OBJECT_TYPE_KEYWORD_REGISTER = (OBJECT_TYPE_PREFIX_KEYWORD << 8) | OBJECT_TYPE_SUFFIX_REGISTER_KEYWORD,
	OBJECT_TYPE_KEYWORD_RETURN = (OBJECT_TYPE_PREFIX_KEYWORD << 8) | OBJECT_TYPE_SUFFIX_RETURN_KEYWORD,
	OBJECT_TYPE_KEYWORD_SIGNED = (OBJECT_TYPE_PREFIX_KEYWORD << 8) | OBJECT_TYPE_SUFFIX_SIGNED_KEYWORD,
	OBJECT_TYPE_KEYWORD_SIZEOF = (OBJECT_TYPE_PREFIX_KEYWORD << 8) | OBJECT_TYPE_SUFFIX_SIZEOF_KEYWORD,
	OBJECT_TYPE_KEYWORD_STATIC = (OBJECT_TYPE_PREFIX_KEYWORD << 8) | OBJECT_TYPE_SUFFIX_STATIC_KEYWORD,
	OBJECT_TYPE_KEYWORD_STRUCT = (OBJECT_TYPE_PREFIX_KEYWORD << 8) | OBJECT_TYPE_SUFFIX_STRUCT_KEYWORD,
	OBJECT_TYPE_KEYWORD_SWITCH = (OBJECT_TYPE_PREFIX_KEYWORD << 8) | OBJECT_TYPE_SUFFIX_SWITCH_KEYWORD,
	OBJECT_TYPE_KEYWORD_TYPEDEF = (OBJECT_TYPE_PREFIX_KEYWORD << 8) | OBJECT_TYPE_SUFFIX_TYPEDEF_KEYWORD,
	OBJECT_TYPE_KEYWORD_UNION = (OBJECT_TYPE_PREFIX_KEYWORD << 8) | OBJECT_TYPE_SUFFIX_UNION_KEYWORD,
	OBJECT_TYPE_KEYWORD_UNSIGNED = (OBJECT_TYPE_PREFIX_KEYWORD << 8) | OBJECT_TYPE_SUFFIX_UNSIGNED_KEYWORD,
	OBJECT_TYPE_KEYWORD_VOID = (OBJECT_TYPE_PREFIX_KEYWORD << 8) | OBJECT_TYPE_SUFFIX_VOID_KEYWORD,
	OBJECT_TYPE_KEYWORD_VOLATILE = (OBJECT_TYPE_PREFIX_KEYWORD << 8) | OBJECT_TYPE_SUFFIX_VOLATILE_KEYWORD,
	OBJECT_TYPE_KEYWORD_WHILE = (OBJECT_TYPE_PREFIX_KEYWORD << 8) | OBJECT_TYPE_SUFFIX_WHILE_KEYWORD,

	/* The different literal type(s). */
	OBJECT_TYPE_LITERAL = (OBJECT_TYPE_PREFIX_LITERAL << 8) | OBJECT_TYPE_SUFFIX_UNKNOWN,
	OBJECT_TYPE_LITERAL_CHARACTER = (OBJECT_TYPE_PREFIX_LITERAL << 8) | OBJECT_TYPE_SUFFIX_CHARACTER_LITERAL,
	OBJECT_TYPE_LITERAL_STRING = (OBJECT_TYPE_PREFIX_LITERAL << 8) | OBJECT_TYPE_SUFFIX_STRING_LITERAL,
	OBJECT_TYPE_LITERAL_INTEGER = (OBJECT_TYPE_PREFIX_LITERAL << 8) | OBJECT_TYPE_SUFFIX_INTEGER_LITERAL,
	OBJECT_TYPE_LITERAL_FLOAT = (OBJECT_TYPE_PREFIX_LITERAL << 8) | OBJECT_TYPE_SUFFIX_FLOAT_LITERAL,
	
	/* The different rule type(s). */
	OBJECT_TYPE_RULE = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_UNKNOWN,
	OBJECT_TYPE_RULE_TRANSLATION_UNIT = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_TRANSLATION_UNIT,
	OBJECT_TYPE_RULE_EXTERNAL_DECLARATION = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_EXTERNAL_DECLARATION,
	OBJECT_TYPE_RULE_FUNCTION_DEFINITION = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_FUNCTION_DEFINITION,
	OBJECT_TYPE_RULE_DECLARATION_SPECIFIER = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_DECLARATION_SPECIFIER,
	OBJECT_TYPE_RULE_STORAGE_CLASS_SPECIFIER = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_STORAGE_CLASS_SPECIFIER,
	OBJECT_TYPE_RULE_TYPE_SPECIFIER = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_TYPE_SPECIFIER,
	OBJECT_TYPE_RULE_STRUCT_OR_UNION_SPECIFIER = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_STRUCT_OR_UNION_SPECIFIER,
	OBJECT_TYPE_RULE_STRUCT_OR_UNION = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_STRUCT_OR_UNION,
	OBJECT_TYPE_RULE_STRUCT_DECLARATION = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_STRUCT_DECLARATION,
	OBJECT_TYPE_RULE_SPECIFIER_QUALIFIER = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_SPECIFIER_QUALIFIER,
	OBJECT_TYPE_RULE_STRUCT_DECLARATOR_LIST = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_STRUCT_DECLARATOR_LIST,
	OBJECT_TYPE_RULE_STRUCT_DECLARATOR = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_STRUCT_DECLARATOR,
	OBJECT_TYPE_RULE_DECLARATOR = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_DECLARATOR,
	OBJECT_TYPE_RULE_POINTER = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_POINTER,
	OBJECT_TYPE_RULE_TYPE_QUALIFIER = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_TYPE_QUALIFIER,
	OBJECT_TYPE_RULE_DIRECT_DECLARATOR = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_DIRECT_DECLARATOR,
	OBJECT_TYPE_RULE_DIRECT_DECLARATOR_TAIL = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_DIRECT_DECLARATOR_TAIL,
	OBJECT_TYPE_RULE_CONSTANT_EXPRESSION = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_CONSTANT_EXPRESSION,
	OBJECT_TYPE_RULE_CONDITIONAL_EXPRESSION = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_CONDITIONAL_EXPRESSION,
	OBJECT_TYPE_RULE_LOGICAL_OR_EXPRESSION = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_LOGICAL_OR_EXPRESSION,
	OBJECT_TYPE_RULE_LOGICAL_AND_EXPRESSION = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_LOGICAL_AND_EXPRESSION,
	OBJECT_TYPE_RULE_INCLUSIVE_OR_EXPRESSION = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_INCLUSIVE_OR_EXPRESSION,
	OBJECT_TYPE_RULE_EXCLUSIVE_OR_EXPRESSION = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_EXCLUSIVE_OR_EXPRESSION,
	OBJECT_TYPE_RULE_AND_EXPRESSION = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_AND_EXPRESSION,
	OBJECT_TYPE_RULE_EQUALITY_EXPRESSION = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_EQUALITY_EXPRESSION,
	OBJECT_TYPE_RULE_RELATIONAL_EXPRESSION = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_RELATIONAL_EXPRESSION,
	OBJECT_TYPE_RULE_SHIFT_EXPRESSION = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_SHIFT_EXPRESSION,
	OBJECT_TYPE_RULE_ADDITIVE_EXPRESSION = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_ADDITIVE_EXPRESSION,
	OBJECT_TYPE_RULE_MULTIPLICATIVE_EXPRESSION = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_MULTIPLICATIVE_EXPRESSION,
	OBJECT_TYPE_RULE_CAST_EXPRESSION = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_CAST_EXPRESSION,
	OBJECT_TYPE_RULE_UNARY_EXPRESSION = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_UNARY_EXPRESSION,
	OBJECT_TYPE_RULE_POSTFIX_EXPRESSION = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_POSTFIX_EXPRESSION,
	OBJECT_TYPE_RULE_PRIMARY_EXPRESSION = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_PRIMARY_EXPRESSION,
	OBJECT_TYPE_RULE_CONSTANT = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_CONSTANT,
	OBJECT_TYPE_RULE_EXPRESSION = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_EXPRESSION,
	OBJECT_TYPE_RULE_ASSIGNMENT_EXPRESSION = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_ASSIGNMENT_EXPRESSION,
	OBJECT_TYPE_RULE_ASSIGNMENT_OPERATOR = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_ASSIGNMENT_OPERATOR,
	OBJECT_TYPE_RULE_UNARY_OPERATOR = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_UNARY_OPERATOR,
	OBJECT_TYPE_RULE_TYPE_NAME = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_TYPE_NAME,
	OBJECT_TYPE_RULE_PARAMETER_TYPE_LIST = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_PARAMETER_TYPE_LIST,
	OBJECT_TYPE_RULE_PARAMETER_LIST = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_PARAMETER_LIST,
	OBJECT_TYPE_RULE_PARAMETER_DECLARATION = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_PARAMETER_DECLARATION,
	OBJECT_TYPE_RULE_ABSTRACT_DECLARATOR = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_ABSTRACT_DECLARATOR,
	OBJECT_TYPE_RULE_DIRECT_ABSTRACT_DECLARATOR = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_DIRECT_ABSTRACT_DECLARATOR,
	OBJECT_TYPE_RULE_DIRECT_ABSTRACT_DECLARATOR_TAIL = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_DIRECT_ABSTRACT_DECLARATOR_TAIL,
	OBJECT_TYPE_RULE_ENUM_SPECIFIER = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_ENUM_SPECIFIER,
	OBJECT_TYPE_RULE_ENUMERATOR_LIST = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_ENUMERATOR_LIST,
	OBJECT_TYPE_RULE_ENUMERATOR = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_ENUMERATOR,
	OBJECT_TYPE_RULE_TYPEDEF_NAME = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_TYPEDEF_NAME,
	OBJECT_TYPE_RULE_DECLARATION = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_DECLARATION,
	OBJECT_TYPE_RULE_INIT_DECLARATOR = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_INIT_DECLARATOR,
	OBJECT_TYPE_RULE_INITIALIZER = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_INITIALIZER,
	OBJECT_TYPE_RULE_INITIALIZER_LIST = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_INITIALIZER_LIST,
	OBJECT_TYPE_RULE_COMPOUND_STATEMENT = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_COMPOUND_STATEMENT,
	OBJECT_TYPE_RULE_STATEMENT = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_STATEMENT,
	OBJECT_TYPE_RULE_LABELED_STATEMENT = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_LABELED_STATEMENT,
	OBJECT_TYPE_RULE_EXPRESSION_STATEMENT = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_EXPRESSION_STATEMENT,
	OBJECT_TYPE_RULE_SELECTION_STATEMENT = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_SELECTION_STATEMENT,
	OBJECT_TYPE_RULE_ITERATION_STATEMENT = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_ITERATION_STATEMENT,
	OBJECT_TYPE_RULE_JUMP_STATEMENT = (OBJECT_TYPE_PREFIX_RULE << 8) | OBJECT_TYPE_SUFFIX_RULE_JUMP_STATEMENT,

	/* The object type for identifier(s). */
	OBJECT_TYPE_IDENTIFIER = (OBJECT_TYPE_PREFIX_UNKNOWN << 8) | OBJECT_TYPE_SUFFIX_IDENTIFIER
} object_type_t;

typedef struct object
{
	/*
	 *	The object type, made up of vague types (prefixes) and specifiers
	 *	(suffixes).
	 */
	object_type_t t_object_type;

	union
	{
		/*
		 *	Constants can be either literals, or identifiers of constants. But
		 *	for now, we only support literals.
		 */
		struct
		{
			/*
			 *	This union should be identical to the union for storing
			 *	numerical literals found in the scanner's header file.
			 */
			union
			{
				/*
				 *	Integer types, both signed & unsigned, includes the 8-bit,
				 *	16-bit, 32-bit, and 64-bit sizes.
				 */
				int8_t t_int8_literal;
				int16_t t_int16_literal;
				int32_t t_int32_literal;
				int64_t t_int64_literal;
				uint8_t t_uint8_literal;
				uint16_t t_uint16_literal;
				uint32_t t_uint32_literal;
				uint64_t t_uint64_literal;

				/*
				 *	Floating-point types, both 32-bit & 64-bit float literals.
				 */
				float t_float32_literal;
				double t_float64_literal;
			} t_value;
		} t_constant;

		/* Expressions... */
		union
		{
			/* Multiplicative expressions... */
			struct
			{
				/* The operator for the multiplicative expression. */
				enum
				{
					MULTIPLICATIVE_EXPRESSION_TYPE_MULTIPLY,
					MULTIPLICATIVE_EXPRESSION_TYPE_DIVIDE,
					MULTIPLICATIVE_EXPRESSION_TYPE_MODULO,
				} t_operator;

				/* The buffer here should always be two units in size. */
				struct object **ppt_operand_buffer;
				uintmax_t t_operand_buffer_size;
			} t_multiplicative;

			/* Bitwise XOR expressions... */
			struct
			{
				/* The buffer here should always be two units in size. */
				struct object **ppt_operand_buffer;
				uintmax_t t_operand_buffer_size;
			} t_xor;

			/* Bitwise OR expressions... */
			struct
			{
				/* The buffer here should always be two units in size. */
				struct object **ppt_operand_buffer;
				uintmax_t t_operand_buffer_size;
			} t_or;

			/* Conditional expressions... */
			struct
			{
				/* The buffer here should always be three units in size. */
				struct object **ppt_operand_buffer;
				uintmax_t t_operand_buffer_size;
			} t_conditional;

			/* Logical AND expressions... */
			struct
			{
				/* The buffer here should always be two units in size. */
				struct object **ppt_operand_buffer;
				uintmax_t t_operand_buffer_size;
			} t_logical_and;

			/* Logical OR expressions... */
			struct
			{
				/* The buffer here should always be two units in size. */
				struct object **ppt_operand_buffer;
				uintmax_t pt_operand_buffer_size;
			} pt_logical_or;

			/* Bitwise AND expressions... */
			struct
			{
				/* The buffer here should always be two units in size. */
				struct object **ppt_operand_buffer;
				uintmax_t t_operand_buffer_size;
			} t_and;

			/* Assignment expressions... */
			struct
			{
				/* The operator for assignment expressions. */
				enum
				{
					ASSIGNMENT_EXPRESSION_TYPE_RIGHT_SHIFT,
					ASSIGNMENT_EXPRESSION_TYPE_BITWISE_AND,
					ASSIGNMENT_EXPRESSION_TYPE_BITWISE_XOR,
					ASSIGNMENT_EXPRESSION_TYPE_LEFT_SHIFT,
					ASSIGNMENT_EXPRESSION_TYPE_BITWISE_OR,
					ASSIGNMENT_EXPRESSION_TYPE_MULTIPLY,
					ASSIGNMENT_EXPRESSION_TYPE_SUBTRACT,
					ASSIGNMENT_EXPRESSION_TYPE_SIMPLE,
					ASSIGNMENT_EXPRESSION_TYPE_DIVIDE,
					ASSIGNMENT_EXPRESSION_TYPE_MODULO,
					ASSIGNMENT_EXPRESSION_TYPE_ADD
				} t_operator;

				/* The buffer here should always be two units in size. */
				struct object **ppt_operand_buffer;
				uintmax_t t_operand_buffer_size;
			} t_assignment;

			/* Assignment expressions... */
			struct
			{
				/* The operator for assignment expressions. */
				enum
				{
					RELATIONAL_EXPRESSION_TYPE_LESS_THAN,
					RELATIONAL_EXPRESSION_TYPE_BIGGER_THAN,
					RELATIONAL_EXPRESSION_TYPE_LESS_THAN_OR_EQUAL_TO,
					RELATIONAL_EXPRESSION_TYPE_BIGGER_THAN_OR_EQUAL_TO
				} t_operator;

				/* The buffer here should always be two units in size. */
				struct object **ppt_operand_buffer;
				uintmax_t t_operand_buffer_size;
			} t_relational;

			/* Constant expressions... */
			struct
			{
				/* The buffer here can be pretty much any size. */
				struct object **ppt_operand_buffer;
				uintmax_t t_operand_buffer_size;
			} t_constant;

			/* Equality expressions... */
			struct
			{
				/* The operator for assignment expressions. */
				enum
				{
					EQUALITY_EXPRESSION_TYPE_EQUAL_TO,
					EQUALITY_EXPRESSION_TYPE_NOT_EQUAL_TO
				} t_operator;

				/* The buffer here must be two units in size. */
				struct object **ppt_operand_buffer;
				uintmax_t t_operand_buffer_size;
			} t_equality;

			/* Additive expressions... */
			struct
			{
				/* The operator for assignment expressions. */
				enum
				{
					ADDITIVE_EXPRESSION_TYPE_ADD,
					ADDITIVE_EXPRESSION_TYPE_SUBTRACT
				} t_operator;

				/* The buffer here must be two units in size. */
				struct object **ppt_operand_buffer;
				uintmax_t t_operand_buffer_size;
			} t_additive;

			/* Postfix expressions... */
			struct
			{
				/* The operator for assignment expressions. */
				enum
				{
					POSTFIX_EXPRESSION_TYPE_INDIRECT_ACCESS,
					POSTFIX_EXPRESSION_TYPE_DIRECT_ACCCESS,
					POSTFIX_EXPRESSION_TYPE_INCREMENT,
					POSTFIX_EXPRESSION_TYPE_DECREMENT,
					POSTFIX_EXPRESSION_TYPE_ARRAY,
					POSTFIX_EXPRESSION_TYPE_CALL,
				} t_operator;

				/* ... */
				struct object **ppt_operand_buffer;
				uintmax_t t_operand_buffer_size;
			} t_postfix;

			/* Shift expressions... */
			struct
			{
				/* The operator for assignment expressions. */
				enum
				{
					SHIFT_EXPRESSION_TYPE_RIGHT_SHIFT,
					SHIFT_EXPRESSION_TYPE_LEFT_SHIFT
				} t_operator;

				/* The buffer here must be two units in size. */
				struct object **ppt_operand_buffer;
				uintmax_t t_operand_buffer_size;
			} t_shift;

			/* Unary expressions... */
			struct
			{
				/* The operator for assignment expressions. */
				enum
				{
					UNARY_EXPRESSION_TYPE_LOGICAL_NOT,
					UNARY_EXPRESSION_TYPE_BITWISE_NOT,
					UNARY_EXPRESSION_TYPE_DEREFERENCE,
					UNARY_EXPRESSION_TYPE_ADDRESS_OF,
					UNARY_EXPRESSION_TYPE_INCREMENT,
					UNARY_EXPRESSION_TYPE_DECREMENT,
					UNARY_EXPRESSION_TYPE_POSITIVE,
					UNARY_EXPRESSION_TYPE_NEGATIVE,
					UNARY_EXPRESSION_TYPE_SIZEOF
				} t_operator;

				/* The buffer here must be two units in size. */
				struct object **ppt_operand_buffer;
				uintmax_t t_operand_buffer_size;
			} t_unary;

			/* Cast expressions... */
			struct
			{
				/*
				 *	The buffer here must consist of the type name, and another
				 *	cast expression or unary expression.
				 */
				struct object **ppt_operand_buffer;
				uintmax_t t_operand_buffer_size;
			} t_cast;
		} t_expression;
	};
} object_t;

typedef struct
{
	/* The type of the name. */
	enum
	{
		NAME_TYPE_UNKNOWN,
		NAME_TYPE_VARIABLE,
		NAME_TYPE_FUNCTION,
		NAME_TYPE_CONSTANT
	} t_type;

	/* The identifier of the scope that the name is found in. */
	uintmax_t t_scope_identifier;

	/* The name itself. */
	char *pt_name;
} name_t;

int parser_main(token_t *pt_input_token_buffer, uintmax_t *pt_input_token_buffer_size, object_t **ppt_output_object_buffer, uintmax_t *pt_output_object_buffer_size, name_t **ppt_name_buffer, uintmax_t *pt_name_buffer_size);